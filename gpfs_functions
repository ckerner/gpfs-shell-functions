#===============================================================================#
# This file contains various shell functions that we use on many of the GPFS    #
# clusters here at NCSA on the UIUC campus.                                     #
#-------------------------------------------------------------------------------#
# Chad Kerner - ckerner@illinois.edu - chad.kerner@gmail.com                    #
# Senior Storage Engineer, Storage Enabling Technologies                        #
# National Center for Supercomputing Applications                               #
# University of Illinois, Urbana-Champaign                                      #
#===============================================================================#


#===============================================================================#
# Function: is_fs_mounted                                                       #
#    Usage: Given a mount point, check to see if the file system is mounted.    #
#           This function requires the file /MOUNT_POINT/.IS_MOUNTED to be in   #
#           the root directory of the file system.                              #
#-------------------------------------------------------------------------------#
# Parameter: Mount point to check                                               #
# Returns: 0 - If the file system is mounted.                                   #
#          1 - If the file system is not mounted.                               #
#===============================================================================#
function is_fs_mounted {
   TGTPATH=$1
   if [ -f "${TGTPATH}/.IS_MOUNTED" ] ; then
      return 0
   else
      return 1
   fi
}


#===============================================================================#
# Function: is_node_gpfs_manager                                                #
#    Usage: Check the current host to see if it is the GPFS manager node.  .    #
#-------------------------------------------------------------------------------#
# Parameter: None                                                               #
# Returns: 0 - If the current host is the GPFS manager node.                    #
#          1 - If the current host is not the GPFS manager node.                #
#===============================================================================#
function is_node_gpfs_manager {
   #HOSTNAME=`hostname -s`
   HOSTNAME=`/usr/lpp/mmfs/bin/mmgetstate -Y | grep -v HEAD | awk -F: '{print($7)}'`
   MANAGER=`/usr/lpp/mmfs/bin/mmlsmgr -c 2>/dev/null| awk '{print($5)}' | sed -e 's/(//g' -e 's/)//g'`

   RESULT=`echo ${MANAGER} | grep ${HOSTNAME} | wc -l`
   if [ ${RESULT} -ge 1 ] ; then
      return 0
   else
      return 1
   fi
}


#===============================================================================#
# Function: get_manager_name                                                    #
#    Usage: Return the name of the GPFS cluster manager node.                   #
#-------------------------------------------------------------------------------#
# Parameter: None                                                               #
# Returns: A string containing the name of the cluster manager node.            #
#===============================================================================#
function get_manager_name {
   MANAGER=`/usr/lpp/mmfs/bin/mmlsmgr -c 2>/dev/null| awk '{print($5)}' | sed -e 's/(//g' -e 's/)//g'`
   echo ${MANAGER}
}


#===============================================================================#
# Function: are_quotas_enabled                                                  #
#    Usage: Given a GPFS device, check to see if quotas are enabled for that    #
#           device.                                                             #
#-------------------------------------------------------------------------------#
# Parameter: GPFS Device To Check                                               #
# Returns: 0 - If the file system has quotas enabled.                           #
#          1 - If the file system does not have quotas enabled.                 #
#===============================================================================#
function are_quotas_enabled {
   GPFSDEV=$1
   RESULT=`/usr/lpp/mmfs/bin/mmlsfs ${GPFSDEV} -Q -Y | grep quotasAccountingEnabled | wc -l`
   if [ ${RESULT} -ge 1 ] ; then
      return 0
   else
      return 1
   fi
}


function is_lock_set {
   LOCKFILE=$1
   if [ -f /var/run/${LOCKFILE} ] ; then
      return 0
   else
      return 1
   fi
}


function set_lock {
   LOCKFILE=$1
   if [ ! -f /var/run/${LOCKFILE} ] ; then
      touch /var/run/${LOCKFILE}
   fi
}

function remove_lock {
   LOCKFILE=$1
   if [ -f /var/run/${LOCKFILE} ] ; then
      rm -f /var/run/${LOCKFILE} &>/dev/null
   fi
}

function gen_lock_name {
   MYCMD="$*"
   #echo ${MYCMD} | md5sum | awk '{print($1)}'
   echo ${MYCMD} | sed -e 's/\//_/g' | awk '{print($1)}'
}

function get_lock_count {
   LOCKFILE=$1
   COUNT=0
   if [ -f /var/run/${LOCKFILE} ] ; then
      COUNT=`wc -l /var/run/${LOCKFILE} | awk '{print($1)}'`
   fi
   echo ${COUNT}
}

function log_to_lockfile {
   LOCKFILE=$1
   shift
   MYMSG="$*"

   echo "${MYMSG}" >> /var/run/${LOCKFILE}
}

